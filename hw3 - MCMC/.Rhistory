x <- c(randu % 1)
x <- c(randu() % 1)
x <- c(randu())
x <- c(randu)
V <-(.5 - .2) * (.2 - .1)
x1 <- runif(nsamps, 0.2, 0.5)
mcing
mcint
set.seed(1)
nsamps <- 1000
V <-(.5 - .2) * (.2 - .1)
x1 <- runif(nsamps, 0.2, 0.5)
x2 <- runif(nsamps, 0.1, 0.2)
f1 <- function(x, y) {
return (6 * (x - y)^2)
}
mcint <- V * (1 / nsamps) * sum(f1(x1, x2))
sdm <- sqrt((V^2 / nsamps) * var(f1(x1, x2)))
mcint
source("C:/Users/sebas/one/OneDrive/grive/faks/masters/y1/Principles of Uncertainty/R/test.R")
in <- input(name)
in <- input(name)
print(name)
name <- readline("Name")
print(name)
age
1
name <- readline("Name")
name <- readline("Name")
age <- readline("age")
print(name)
print(ls())
rvec = sample(-50:50, 10, replace=True)
rvec = sample(-50:50, 10, replace=TRUE)
rvec = sample(-50:50, 10, replace=TRUE)
Fibonacci <- numeric(10)
Fibonacci[1] <- Fibonacci[2] <- 1
for (i in 3:10) Fibonacci[i] <- Fibonacci[i-2] + Fibonacci[i-1]
print(Fibonacci)
print(i)
for (i in 1:100) {
print(i)
if (i % 3 == 0 && i & 5 == 0) {
for (i in 1:100) {
print(i)
if (i %% 3 == 0 && i %% 5 == 0) {
print("FizzBuzz")
}
else if (i %% 3 == 0) {
print("Fizz")
}
else if (i %% 5 == 0) {
print("Buzz")
}
}
print(min(rvec), max(rvec))
print(min(rvec), maximum(rvec))
print(min(rvec), max(rvec))
print(min(rvec))
print(max(rvec))
norm <- rnorm()
print(norm)
hist(norm)
norm <- qnorm(100)
print(norm)
norm <- rnorm(100)
print(norm)
hist(norm)
print(mean(norm))
# Bootstrapping
smp_size <- 1000
y <- rbinom(smp_size, 10, prob=.5)
y <- rpois(smp_size, 4)
y <- rnorm(smp_size, mean=2, sd=1)
bootstrap <- function(y, n, func) {
means <- numeric(n)
for (i in 1:n) {
smp <- sample(y, replace=TRUE)
means[i] <- func(smp)
}
print(sd(means))
hist(means)
}
bootstrap(y, 100, sd)
bootstrap(y, smp_size, mean)
?rbinom
mean(y)
bootstrap(y, 100, sd)
smp <- sample(y, size=length(y), replace=TRUE)
size = 1000
bernoulli <- rbinom(size, size=1, prob=.5)
hist(bernoulli)
# sample_size, number_of_trials, probability of each trial
binomial <- rbinom(size, size=10, prob=.5)
hist(binomial, xlab="# of successes for 10 trials")
# Probability of k events occurring when known rate is 10
poisson <- rpois(size, lambda=10)
hist(poisson, xlab="# of events (lambda=10)")
# Probability of taking k trials before success
geom <- rgeom(size, prob=.3)
hist(geom, xlim=c(0, 20), xlab="# of trials before success")
# How many trials to success 90% of the time?
qgeom(p=0.9, prob=.3)
# Normal
normal <- rnorm(size)
hist(normal, xlab="Normal, mu=0, sigma=1")
# uniform
uniform <- runif(size)
hist(uniform)
# beta
beta <- rbeta(size, shape1=2, shape2=2)
hist(beta)
plot(pbeta(c(seq(0, 1, by=0.02)), shape1=6, shape2=6))# cdf
# gamma
gamma <- rgamma(size, shape=3)
hist(gamma)
plot(pgamma(c(seq(0, 1, by=0.02)), shape=6, rate=2))# cdf
# exponential
exp <- rexp(size, rate=1)
hist(exp, xlab="Time between events")
plot(pexp(c(seq(0,1,by=0.05)))) # cdf
probs <- c(seq(0,1,by=0.05))
# logistic
logistic <- rlogis(size)
hist(logistic)
plot(plogis(probs, location=19, scale=2))
# negative binomial
nbinom <- rnbinom(size, size=10, prob=.5)
hist(nbinom, xlab="# of failures before 10 successes")
plot(pnbinom(probs, size=10, prob=.5), xlim=c(0, 100))
qnbinom(.9, size=10, prob=.5)
# multinomial
multinomial <- rmultinom(size, size=10, prob=.5)
hist(multinomial)
y <- rnorm(smp_size, mean=2, sd=1)
means <- numeric(n)
bootstrap <- function(y, n, func) {
means <- numeric(n)
for (i in 1:n) {
smp <- sample(y, size=length(y), replace=TRUE)
means[i] <- func(smp)
}
print(sd(means))
hist(means)
}
bootstrap(y, 100, sd)
bootstrap(y, smp_size, mean)
y <- rbinom(smp_size, 10, prob=.5)
bootstrap <- function(y, n, func) {
means <- numeric(n)
for (i in 1:n) {
smp <- sample(y, size=length(y), replace=TRUE)
means[i] <- func(smp)
}
print(sd(means))
hist(means)
}
bootstrap(y, smp_size, mean)
length(y)
bootstrap(y, smp_size, mean)
y <- rnorm(smp_size, mean=2, sd=1)
bootstrap <- function(y, n, func) {
means <- numeric(n)
for (i in 1:n) {
smp <- sample(y, size=length(y), replace=TRUE)
means[i] <- func(smp)
}
print(sd(means))
hist(means)
}
bootstrap(y, smp_size, mean)
y <- c(quantile(x, 0.025), quantile(x, 0.975))
x <- bootstrap(y, smp_size, mean)
y <- c(quantile(x, 0.025), quantile(x, 0.975))
x
bootstrap <- function(y, n, func) {
means <- numeric(n)
for (i in 1:n) {
smp <- sample(y, size=length(y), replace=TRUE)
means[i] <- func(smp)
}
return(means)
}
x <- bootstrap(y, smp_size, mean)
x
y <- c(quantile(x, 0.025), quantile(x, 0.975))
y
hist(x)
y1 <- rbinom(smp_size, 10, prob=.5)
y2 <- rpois(smp_size, 4)
y3 <- rnorm(smp_size, mean=2, sd=1)
plot(y1)
plot(y1 ~ y2)
plot(y1, y2, y3)
plot(y1, y2)
y3>0
sum(y3>0)
aggregate(y3 ~ y2)
aggregate(y3 ~ y2, median)
aggregate(y3 ~ y2, FUN=median)
A <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol=3)
a
A
A_t <- A %*% t(A)
A_t
smp_size <- 1000
y1 <- rbinom(smp_size, 10, prob=.5)
y2 <- rpois(smp_size, 4)
y3 <- rnorm(smp_size, mean=2, sd=1)
plot(y1, y2)
hist(x)
aggregate(y3 ~ y2, FUN=median)
chdir("C:\Users\sebas\one\OneDrive\grive\faks\masters\y1\2nd semester\Mathematics II\MCMC")
chdir("C:/Users/sebas/one/OneDrive/grive/faks/masters/y1/2nd semester/Mathematics II/MCMC")
setwd("C:/Users/sebas/one/OneDrive/grive/faks/masters/y1/2nd semester/Mathematics II/MCMC")
getwd()
setwd("C:/Users/sebas/one/OneDrive/grive/faks/masters/y1/2nd semester/Mathematics II/Gradient Descend/Mat-II/hw3 - MCMC")
setwd("C:/Users/sebas/one/OneDrive/grive/faks/masters/y1/2nd semester/Mathematics II/Gradient Descent/Mat-II/hw3 - MCMC")
getwd()
fn <- function(x) {
return(x^(-3/4) * exp(-x))
}
fn(2)
fn(1)
?rgamma
integral <- pgamma(1, shape=0.25, lower.tail=TRUE)
plot(integral)
x_vals <- seq(0.001, 1, length.out=1000)
plot(x_vals, fn(x_vals), type="l", col="blue",
main=expression(f(x) == x^{-3/4} * e^{-x}),
xlab="x", ylab="f(x)", lwd=2)
y_vals = cumsum(sapply(x_vals, fn(x)))
fn <- function(x) {
return(x^(-3/4) * exp(-x))
}
y_vals = cumsum(sapply(x_vals, fn(x)))
y_vals = cumsum(sapply(x_vals, fn))
plot(x_vals, y_vals)
y_vals = cumsum(sapply(x_vals, fn))
plot(x_vals, y_vals, type="l", col="blue",
main=expression(f(x) == x^{-3/4} * e^{-x}),
xlab="x", ylab="f(x)", lwd=2)
y_vals = cumsum(sapply(x_vals, fn))
plot(x_vals, y_vals, type="l", col="blue",
main=expression(integral f(x) == x^{-3/4} * e^{-x}),
print(integral)
